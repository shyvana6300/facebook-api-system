const accountValidator = require('../../../middleware/accountValidator');
const connectDB = require('../../../dbconnector');
const accountServices = require('../../../services/accountServices');
const bcrypt = require("bcryptjs");
jest.useFakeTimers();
// test middleware
const validateAccount = accountValidator.validateAccount;

describe("Test accountValidator", () => {
    beforeAll(() => {
        connectDB();
    });

    // Test validateAccount()
    describe("Test validateAccount()", () => {
        const mockReqNG = require('./mocks/validateAccount/request/mockReqNG');
        const mockReqOK = require('./mocks/validateAccount/request/mockReqOK');
        const mockedNext = jest.fn();
        describe("Test caseOK", () => {
            test("It should call the next() function", () => {
                const mockedRes = jest.fn();
                validateAccount(mockReqOK, mockedRes, mockedNext);
                expect(mockedNext).toHaveBeenCalled();
            });
        });

        // xử lý mock function cho return res.status().send()
        describe("Test caseNG", () => {
            
            // Case 1: missing email from request body
            test("It should return error message email required", () => {
                const mockedRes = require('./mocks/validateAccount/response/mockResponse');
                const mockedReq = mockReqNG.missingEmail;
                validateAccount(mockedReq, mockedRes, mockedNext);
                expect(mockedRes.status).toHaveBeenCalledWith(400);
                expect(mockedRes.send).toHaveBeenCalledWith(`"email" is required`);
            });
            // Case 2: email in req.body is empty
            test("It should return error message email is empty", () => {
                const mockedRes = require('./mocks/validateAccount/response/mockResponse');
                const mockedReq = mockReqNG.emptyEmail;
                validateAccount(mockedReq, mockedRes, mockedNext);
                expect(mockedRes.status).toHaveBeenCalledWith(400);
                expect(mockedRes.send).toHaveBeenCalledWith(`"email" is not allowed to be empty`);
            });
            // Case 3: invalid email - enter number
            test("It should return error message email must be a string", () => {
                const mockedRes = require('./mocks/validateAccount/response/mockResponse');
                const mockedReq = mockReqNG.invalidEmailNumber;
                validateAccount(mockedReq, mockedRes, mockedNext);
                expect(mockedRes.status).toHaveBeenCalledWith(400);
                expect(mockedRes.send).toHaveBeenCalledWith(`"email" must be a string`);
            });
            // Case 4: invalid email - enter invalid email string
            test("It should return error message email is invalid", () => {
                const mockedRes = require('./mocks/validateAccount/response/mockResponse');
                const mockedReq = mockReqNG.invalidEmailFormat;
                validateAccount(mockedReq, mockedRes, mockedNext);
                expect(mockedRes.status).toHaveBeenCalledWith(400);
                expect(mockedRes.send).toHaveBeenCalledWith(`"email" ssssssmust be a valid email`);
            });
            
        });
    });
})